// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  
  accounts      Account[]
  sessions      Session[]
  serviceProvider ServiceProvider?
  bookings        Booking[]
}

enum UserRole {
  CUSTOMER
  SERVICE_PROVIDER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  services    Service[]
}

model Service {
  id             String           @id @default(cuid())
  name           String
  description    String
  basePrice      Decimal         @db.Decimal(10, 2)
  categoryId     String
  category       ServiceCategory  @relation(fields: [categoryId], references: [id])
  serviceProviders ServiceProviderService[]
  bookings       Booking[]
}

model ServiceProvider {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  
  companyName  String?
  description  String?
  rating       Float     @default(0)
  
  services     ServiceProviderService[]
  bookings     Booking[]
}

model ServiceProviderService {
  serviceProviderId String
  serviceId         String
  price             Decimal          @db.Decimal(10, 2)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  service           Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@id([serviceProviderId, serviceId])
}

model Booking {
  id                 String           @id @default(cuid())
  customerId         String
  serviceProviderId  String
  serviceId          String
  
  customer           User             @relation(fields: [customerId], references: [id])
  serviceProvider    ServiceProvider  @relation(fields: [serviceProviderId], references: [id])
  service            Service          @relation(fields: [serviceId], references: [id])
  
  scheduledAt        DateTime
  status            BookingStatus     @default(PENDING)
  totalPrice        Decimal          @db.Decimal(10, 2)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
